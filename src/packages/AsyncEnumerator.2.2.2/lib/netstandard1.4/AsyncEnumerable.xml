<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AsyncEnumerable</name>
    </assembly>
    <members>
        <member name="T:System.Collections.Async.AsyncEnumerable">
            <summary>
            Base abstract class that implements <see cref="T:System.Collections.Async.IAsyncEnumerable"/>.
            Use concrete implementation <see cref="T:System.Collections.Async.AsyncEnumerable`1"/> or <see cref="T:System.Collections.Async.AsyncEnumerableWithState`2"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerable.Empty``1">
            <summary>
            Returns pre-cached empty collection
            </summary>
        </member>
        <member name="T:System.Collections.Async.AsyncEnumerable`1">
            <summary>
            Helps to enumerate items in a collection asynchronously
            </summary>
            <example>
            <code>
            IAsyncEnumerable&lt;int&gt; ProduceNumbers(int start, int end)
            {
              return new AsyncEnumerable&lt;int&gt;(async yield => {
                for (int number = start; number &lt;= end; number++)
                  await yield.ReturnAsync(number);
              });
            }
            
            async Task ConsumeAsync()
            {
              var asyncEnumerableCollection = ProduceNumbers(start: 1, end: 10);
              await asyncEnumerableCollection.ForEachAsync(async number => {
                await Console.Out.WriteLineAsync(number);
              });
            }
            </code>
            </example>
        </member>
        <member name="F:System.Collections.Async.AsyncEnumerable`1.Empty">
            <summary>
            A pre-cached empty collection
            </summary>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerable`1.#ctor(System.Func{System.Collections.Async.AsyncEnumerator{`0}.Yield,System.Threading.Tasks.Task})">
            <summary>
            Constructor
            </summary>
            <param name="enumerationFunction">A function that enumerates items in a collection asynchronously</param>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerable`1.GetAsyncEnumeratorAsync(System.Threading.CancellationToken)">
            <summary>
            Creates an enumerator that iterates through a collection asynchronously
            </summary>
            <param name="cancellationToken">A cancellation token to cancel creation of the enumerator in case if it takes a lot of time</param>
            <returns>Returns a task with the created enumerator as result on completion</returns>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerable`1.System#Collections#Async#IAsyncEnumerable#GetAsyncEnumeratorAsync(System.Threading.CancellationToken)">
            <summary>
            Creates an enumerator that iterates through a collection asynchronously
            </summary>
            <param name="cancellationToken">A cancellation token to cancel creation of the enumerator in case if it takes a lot of time</param>
            <returns>Returns a task with the created enumerator as result on completion</returns>
        </member>
        <member name="T:System.Collections.Async.AsyncEnumerableWithState`2">
            <summary>
            Similar to <see cref="T:System.Collections.Async.AsyncEnumerable`1"/>, but allows you to pass a state object into the enumeration function, what can be
            used for performance optimization, so don't have to create a delegate on the fly every single time you create the enumerator.
            </summary>
            <typeparam name="TItem">Type of items returned by </typeparam>
            <typeparam name="TState">Type of the state object</typeparam>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerableWithState`2.#ctor(System.Func{System.Collections.Async.AsyncEnumerator{`0}.Yield,`1,System.Threading.Tasks.Task},`1)">
            <summary>
            Constructor
            </summary>
            <param name="enumerationFunction">A function that enumerates items in a collection asynchronously</param>
            <param name="state">A state object that is passed to the <paramref name="enumerationFunction"/></param>
        </member>
        <member name="P:System.Collections.Async.AsyncEnumerableWithState`2.State">
            <summary>
            A user state that gets passed into the enumeration function.
            </summary>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerableWithState`2.GetAsyncEnumeratorAsync(System.Threading.CancellationToken)">
            <summary>
            Creates an enumerator that iterates through a collection asynchronously
            </summary>
            <param name="cancellationToken">A cancellation token to cancel creation of the enumerator in case if it takes a lot of time</param>
            <returns>Returns a task with the created enumerator as result on completion</returns>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerableWithState`2.System#Collections#Async#IAsyncEnumerable#GetAsyncEnumeratorAsync(System.Threading.CancellationToken)">
            <summary>
            Creates an enumerator that iterates through a collection asynchronously
            </summary>
            <param name="cancellationToken">A cancellation token to cancel creation of the enumerator in case if it takes a lot of time</param>
            <returns>Returns a task with the created enumerator as result on completion</returns>
        </member>
        <member name="T:System.Collections.Async.AsyncEnumerationCanceledException">
            <summary>
            This exception is thrown when you call <see cref="M:System.Collections.Async.AsyncEnumerator`1.Yield.Break"/>
            or when the enumerator is disposed before reaching the end of enumeration.
            </summary>
        </member>
        <member name="T:System.Collections.Async.AsyncEnumerator">
            <summary>
            Base type for <see cref="T:System.Collections.Async.AsyncEnumerator`1"/> and <see cref="T:System.Collections.Async.AsyncEnumeratorWithState`2"/>
            </summary>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerator.Empty``1">
            <summary>
            Returns an empty <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/>. Safe to use by multiple threads.
            </summary>
        </member>
        <member name="T:System.Collections.Async.AsyncEnumeratorWithState`2">
            <summary>
            Helps to enumerate items in a collection asynchronously.
            Provides exactly the same functionality as <see cref="T:System.Collections.Async.AsyncEnumerator`1"/>,
            but allows to pass a user state object in the enumeration function,
            what can be used for performance optimization.
            </summary>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumeratorWithState`2.#ctor(System.Func{System.Collections.Async.AsyncEnumerator{`0}.Yield,`1,System.Threading.Tasks.Task},`1,System.Action{`1})">
            <summary>
            Constructor
            </summary>
            <param name="enumerationFunction">A function that enumerates items in a collection asynchronously</param>
            <param name="state">Any state object that is passed to the <paramref name="enumerationFunction"/></param>
            <param name="onDispose">Optional action that gets invoked on Dispose()</param>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumeratorWithState`2.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="P:System.Collections.Async.AsyncEnumeratorWithState`2.State">
            <summary>
            A user state that gets passed into the enumeration function.
            </summary>
        </member>
        <member name="P:System.Collections.Async.AsyncEnumeratorWithState`2.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator
            </summary>
        </member>
        <member name="P:System.Collections.Async.AsyncEnumeratorWithState`2.IsEnumerationComplete">
            <summary>
            Tells if enumeration is complete. Returns True only after MoveNextAsync returns False.
            </summary>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumeratorWithState`2.MoveNextAsync(System.Threading.CancellationToken)">
            <summary>
            Advances the enumerator to the next element of the collection asynchronously
            </summary>
            <param name="cancellationToken">A cancellation token to cancel the enumeration</param>
            <returns>Returns a Task that does transition to the next element. The result of the task is True if the enumerator was successfully advanced to the next element, or False if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumeratorWithState`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources
            </summary>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumeratorWithState`2.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources
            </summary>
            <param name="manualDispose">True if called from Dispose() method, otherwise False - called by GC</param>
        </member>
        <member name="T:System.Collections.Async.AsyncEnumerator`1">
            <summary>
            Helps to enumerate items in a collection asynchronously
            </summary>
        </member>
        <member name="F:System.Collections.Async.AsyncEnumerator`1.Empty">
            <summary>
            An empty <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/>. Safe to use by multiple threads.
            </summary>
        </member>
        <member name="T:System.Collections.Async.AsyncEnumerator`1.Yield">
            <summary>
            The asynchronous version of the 'yield' construction
            </summary>
        </member>
        <member name="P:System.Collections.Async.AsyncEnumerator`1.Yield.CancellationToken">
            <summary>
            Gets the cancellation token that was passed to the <see cref="M:System.Collections.Async.IAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)"/> method
            </summary>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerator`1.Yield.ReturnAsync(`0)">
            <summary>
            Yields an item asynchronously (similar to 'yield return' statement)
            </summary>
            <param name="item">The item of the collection to yield</param>
            <returns>Returns a Task which tells if when you can continue to yield the next item</returns>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerator`1.Yield.Break">
            <summary>
            Stops iterating items in the collection (similar to 'yield break' statement)
            </summary>
            <exception cref="T:System.Collections.Async.AsyncEnumerationCanceledException">Always throws this exception to stop the enumeration task</exception>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerator`1.#ctor(System.Func{System.Collections.Async.AsyncEnumerator{`0}.Yield,System.Threading.Tasks.Task},System.Action)">
            <summary>
            Constructor
            </summary>
            <param name="enumerationFunction">A function that enumerates items in a collection asynchronously</param>
            <param name="onDispose">Optional action that gets invoked on Dispose()</param>
        </member>
        <member name="T:System.Collections.Async.AsyncEnumerator`1.NoStateAdapter">
            <summary>
            Internal implementation details
            </summary>
        </member>
        <member name="T:System.Collections.Async.AsyncEnumerableAdapterExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> for backward compatibility with version 1 of this libraray.
            Not recommended to use.
            </summary>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerableAdapterExtensions.ToEnumerable(System.Collections.Async.IAsyncEnumerable)">
            <summary>
            Converts <see cref="T:System.Collections.Async.IAsyncEnumerable"/> to <see cref="T:System.Collections.IEnumerable"/>.
            This method is marked as [Obsolete] to discourage you from doing such conversion,
            which defeats the whole purpose of having a non-blocking async enumeration,
            and what might lead to dead-locks in ASP.NET or WPF applications.
            </summary>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerableAdapterExtensions.ToEnumerable``1(System.Collections.Async.IAsyncEnumerable{``0})">
            <summary>
            Converts <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            This method is marked as [Obsolete] to discourage you from doing such conversion,
            which defeats the whole purpose of having a non-blocking async enumeration,
            and what might lead to dead-locks in ASP.NET or WPF applications.
            </summary>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerableAdapterExtensions.ToEnumerator(System.Collections.Async.IAsyncEnumerator)">
            <summary>
            Converts <see cref="T:System.Collections.Async.IAsyncEnumerator"/> to <see cref="T:System.Collections.IEnumerator"/>.
            This method is marked as [Obsolete] to discourage you from doing such conversion,
            which defeats the whole purpose of having a non-blocking async enumeration,
            and what might lead to dead-locks in ASP.NET or WPF applications.
            </summary>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerableAdapterExtensions.ToEnumerator``1(System.Collections.Async.IAsyncEnumerator{``0})">
            <summary>
            Converts <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            This method is marked as [Obsolete] to discourage you from doing such conversion,
            which defeats the whole purpose of having a non-blocking async enumeration,
            and what might lead to dead-locks in ASP.NET or WPF applications.
            </summary>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerableAdapterExtensions.GetEnumerator(System.Collections.Async.IAsyncEnumerable)">
            <summary>
            Creates an enumerator that iterates through a collection synchronously.
            This method is marked as [Obsolete] to discourage you from using this synchronous version of
            the method instead of <see cref="M:System.Collections.Async.IAsyncEnumerable.GetAsyncEnumeratorAsync(System.Threading.CancellationToken)"/>,
            what might lead to dead-locks in ASP.NET or WPF applications.
            </summary>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerableAdapterExtensions.GetEnumerator``1(System.Collections.Async.IAsyncEnumerable{``0})">
            <summary>
            Creates an enumerator that iterates through a collection synchronously.
            This method is marked as [Obsolete] to discourage you from using this synchronous version of
            the method instead of <see cref="M:System.Collections.Async.IAsyncEnumerable`1.GetAsyncEnumeratorAsync(System.Threading.CancellationToken)"/>,
            what might lead to dead-locks in ASP.NET or WPF applications.
            </summary>
        </member>
        <member name="M:System.Collections.Async.AsyncEnumerableAdapterExtensions.MoveNext(System.Collections.Async.IAsyncEnumerator)">
            <summary>
            Advances the enumerator to the next element of the collection synchronously.
            This method is marked as [Obsolete] to discourage you from using this synchronous version of
            the method instead of <see cref="M:System.Collections.Async.IAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)"/>,
            what might lead to dead-locks in ASP.NET or WPF applications.
            </summary>
        </member>
        <member name="T:System.Collections.Async.ForEachAsyncExtensions">
            <summary>
            Enables asynchronous 'foreach' enumeration over an IAsyncEnumerable
            </summary>
        </member>
        <member name="M:System.Collections.Async.ForEachAsyncExtensions.ForEachAsync(System.Collections.Async.IAsyncEnumerable,System.Action{System.Object},System.Threading.CancellationToken)">
            <summary>
            Enumerates over all elements in the collection asynchronously
            </summary>
            <param name="enumerable">The collection of elements which can be enumerated asynchronously</param>
            <param name="action">A synchronous action to perform for every single item in the collection</param>
            <param name="cancellationToken">A cancellation token to stop enumerating</param>
            <returns>Returns a Task which does enumeration over elements in the collection</returns>
        </member>
        <member name="M:System.Collections.Async.ForEachAsyncExtensions.ForEachAsync(System.Collections.Async.IAsyncEnumerator,System.Action{System.Object},System.Threading.CancellationToken)">
            <summary>
            Enumerates over all elements in the collection asynchronously
            </summary>
            <param name="enumerator">The collection of elements which can be enumerated asynchronously</param>
            <param name="action">A synchronous action to perform for every single item in the collection</param>
            <param name="cancellationToken">A cancellation token to stop enumerating</param>
            <returns>Returns a Task which does enumeration over elements in the collection</returns>
        </member>
        <member name="M:System.Collections.Async.ForEachAsyncExtensions.ForEachAsync(System.Collections.Async.IAsyncEnumerable,System.Action{System.Object,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Enumerates over all elements in the collection asynchronously
            </summary>
            <param name="enumerable">The collection of elements which can be enumerated asynchronously</param>
            <param name="action">A synchronous action to perform for every single item in the collection, where the second argument is the index of an item</param>
            <param name="cancellationToken">A cancellation token to stop enumerating</param>
            <returns>Returns a Task which does enumeration over elements in the collection</returns>
        </member>
        <member name="M:System.Collections.Async.ForEachAsyncExtensions.ForEachAsync(System.Collections.Async.IAsyncEnumerator,System.Action{System.Object,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Enumerates over all elements in the collection asynchronously
            </summary>
            <param name="enumerator">The collection of elements which can be enumerated asynchronously</param>
            <param name="action">A synchronous action to perform for every single item in the collection, where the second argument is the index of an item</param>
            <param name="cancellationToken">A cancellation token to stop enumerating</param>
            <returns>Returns a Task which does enumeration over elements in the collection</returns>
        </member>
        <member name="M:System.Collections.Async.ForEachAsyncExtensions.ForEachAsync(System.Collections.Async.IAsyncEnumerable,System.Func{System.Object,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Enumerates over all elements in the collection asynchronously
            </summary>
            <param name="enumerable">The collection of elements which can be enumerated asynchronously</param>
            <param name="action">An asynchronous action to perform for every single item in the collection</param>
            <param name="cancellationToken">A cancellation token to stop enumerating</param>
            <returns>Returns a Task which does enumeration over elements in the collection</returns>
        </member>
        <member name="M:System.Collections.Async.ForEachAsyncExtensions.ForEachAsync(System.Collections.Async.IAsyncEnumerator,System.Func{System.Object,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Enumerates over all elements in the collection asynchronously
            </summary>
            <param name="enumerator">The collection of elements which can be enumerated asynchronously</param>
            <param name="action">An asynchronous action to perform for every single item in the collection</param>
            <param name="cancellationToken">A cancellation token to stop enumerating</param>
            <returns>Returns a Task which does enumeration over elements in the collection</returns>
        </member>
        <member name="M:System.Collections.Async.ForEachAsyncExtensions.ForEachAsync(System.Collections.Async.IAsyncEnumerable,System.Func{System.Object,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Enumerates over all elements in the collection asynchronously
            </summary>
            <param name="enumerable">The collection of elements which can be enumerated asynchronously</param>
            <param name="action">An asynchronous action to perform for every single item in the collection, where the second argument is the index of an item</param>
            <param name="cancellationToken">A cancellation token to stop enumerating</param>
            <returns>Returns a Task which does enumeration over elements in the collection</returns>
        </member>
        <member name="M:System.Collections.Async.ForEachAsyncExtensions.ForEachAsync(System.Collections.Async.IAsyncEnumerator,System.Func{System.Object,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Enumerates over all elements in the collection asynchronously
            </summary>
            <param name="enumerator">The collection of elements which can be enumerated asynchronously</param>
            <param name="action">An asynchronous action to perform for every single item in the collection, where the second argument is the index of an item</param>
            <param name="cancellationToken">A cancellation token to stop enumerating</param>
            <returns>Returns a Task which does enumeration over elements in the collection</returns>
        </member>
        <member name="M:System.Collections.Async.ForEachAsyncExtensions.ForEachAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Enumerates over all elements in the collection asynchronously
            </summary>
            <typeparam name="T">The type of elements in the collection</typeparam>
            <param name="enumerable">The collection of elements which can be enumerated asynchronously</param>
            <param name="action">A synchronous action to perform for every single item in the collection</param>
            <param name="cancellationToken">A cancellation token to stop enumerating</param>
            <returns>Returns a Task which does enumeration over elements in the collection</returns>
        </member>
        <member name="M:System.Collections.Async.ForEachAsyncExtensions.ForEachAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Enumerates over all elements in the collection asynchronously
            </summary>
            <typeparam name="T">The type of elements in the collection</typeparam>
            <param name="enumerator">The collection of elements which can be enumerated asynchronously</param>
            <param name="action">A synchronous action to perform for every single item in the collection</param>
            <param name="cancellationToken">A cancellation token to stop enumerating</param>
            <returns>Returns a Task which does enumeration over elements in the collection</returns>
        </member>
        <member name="M:System.Collections.Async.ForEachAsyncExtensions.ForEachAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Action{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Enumerates over all elements in the collection asynchronously
            </summary>
            <typeparam name="T">The type of elements in the collection</typeparam>
            <param name="enumerable">The collection of elements which can be enumerated asynchronously</param>
            <param name="action">A synchronous action to perform for every single item in the collection, where the second argument is the index of an item</param>
            <param name="cancellationToken">A cancellation token to stop enumerating</param>
            <returns>Returns a Task which does enumeration over elements in the collection</returns>
        </member>
        <member name="M:System.Collections.Async.ForEachAsyncExtensions.ForEachAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Action{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Enumerates over all elements in the collection asynchronously
            </summary>
            <typeparam name="T">The type of elements in the collection</typeparam>
            <param name="enumerator">The collection of elements which can be enumerated asynchronously</param>
            <param name="action">A synchronous action to perform for every single item in the collection, where the second argument is the index of an item</param>
            <param name="cancellationToken">A cancellation token to stop enumerating</param>
            <returns>Returns a Task which does enumeration over elements in the collection</returns>
        </member>
        <member name="M:System.Collections.Async.ForEachAsyncExtensions.ForEachAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Enumerates over all elements in the collection asynchronously
            </summary>
            <typeparam name="T">The type of elements in the collection</typeparam>
            <param name="enumerable">The collection of elements which can be enumerated asynchronously</param>
            <param name="action">An asynchronous action to perform for every single item in the collection</param>
            <param name="cancellationToken">A cancellation token to stop enumerating</param>
            <returns>Returns a Task which does enumeration over elements in the collection</returns>
        </member>
        <member name="M:System.Collections.Async.ForEachAsyncExtensions.ForEachAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Enumerates over all elements in the collection asynchronously
            </summary>
            <typeparam name="T">The type of elements in the collection</typeparam>
            <param name="enumerator">The collection of elements which can be enumerated asynchronously</param>
            <param name="action">An asynchronous action to perform for every single item in the collection</param>
            <param name="cancellationToken">A cancellation token to stop enumerating</param>
            <returns>Returns a Task which does enumeration over elements in the collection</returns>
        </member>
        <member name="M:System.Collections.Async.ForEachAsyncExtensions.ForEachAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Enumerates over all elements in the collection asynchronously
            </summary>
            <typeparam name="T">The type of elements in the collection</typeparam>
            <param name="enumerable">The collection of elements which can be enumerated asynchronously</param>
            <param name="action">An asynchronous action to perform for every single item in the collection, where the second argument is the index of an item</param>
            <param name="cancellationToken">A cancellation token to stop enumerating</param>
            <returns>Returns a Task which does enumeration over elements in the collection</returns>
        </member>
        <member name="M:System.Collections.Async.ForEachAsyncExtensions.ForEachAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Enumerates over all elements in the collection asynchronously
            </summary>
            <typeparam name="T">The type of elements in the collection</typeparam>
            <param name="enumerator">The collection of elements which can be enumerated asynchronously</param>
            <param name="action">An asynchronous action to perform for every single item in the collection, where the second argument is the index of an item</param>
            <param name="cancellationToken">A cancellation token to stop enumerating</param>
            <returns>Returns a Task which does enumeration over elements in the collection</returns>
        </member>
        <member name="T:System.Collections.Async.IAsyncEnumerableExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> interface
            </summary>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.SingleAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return the single element of.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/>.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.SingleAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return the single element of.</param>
            <param name="noneExceptionMessage">The message of an exception which is thrown when the source collection is empty.</param>
            <param name="manyExceptionMessage">The message of an exception which is thrown when the source collection has more than one element.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/>.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.SingleAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence that matches the criteria.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return the single element of.</param>
            <param name="predicate">Criteria predicate to select the only element.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/>.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.SingleAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence that matches the criteria.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return the single element of.</param>
            <param name="predicate">Criteria predicate to select the only element.</param>
            <param name="noneExceptionMessage">The message of an exception which is thrown when the source collection is has no element matching the criteria.</param>
            <param name="manyExceptionMessage">The message of an exception which is thrown when the source collection has more than one element matching the criteria.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/>.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.SingleOrDefaultAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the only element of a sequence, and returns a default value if there is not exactly one element in the sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return the single element of.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/>.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.SingleOrDefaultAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the only element of a sequence, and returns a default value if there is not exactly one element in the sequence that matches the criteria.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return the single element of.</param>
            <param name="predicate">Criteria predicate to select the only element.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/>.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.FirstAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the first element in the <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return an element from.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/></param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.FirstAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the first element in the <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return an element from.</param>
            <param name="exceptionMessage">An optional custom exception message for the case when the <paramref name="source"/> is empty</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/></param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.FirstAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the first element in a sequence that satisfies a specified condition.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/></param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.FirstAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the first element in a sequence that satisfies a specified condition.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="exceptionMessage">An optional custom exception message for the case when the <paramref name="source"/> is empty</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/></param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.FirstOrDefaultAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the first element in the <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/>, or a default value if no element is found.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return an element from.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/></param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.FirstOrDefaultAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the first element in a sequence that satisfies a specified condition, or a default value if no element is found.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/></param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Select``2(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Select``2(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Int64,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.SelectMany``2(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Async.IAsyncEnumerable{``1}})">
            <summary>
            Projects each element of a sequence to an IAsyncEnumerable&lt;T&gt; and flattens the resulting sequences into one sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value in the IAsyncEnumerable returned by <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each source element.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.SelectMany``3(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Async.IAsyncEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects each element of a sequence to an IAsyncEnumerable&lt;T&gt; and flattens the resulting sequences into one sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TItem">The type of the intermediate elements collected by <paramref name="collectionSelector"/>.</typeparam>
            <typeparam name="TResult">The type of the elements of the resulting sequence by <paramref name="resultSelector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="collectionSelector">A transform function to apply to each element of the input sequence.</param>
            <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.SelectMany``2(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of a sequence to an IAsyncEnumerable&lt;T&gt; and flattens the resulting sequences into one sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value in the IAsyncEnumerable returned by <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each source element.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.SelectMany``3(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects each element of a sequence to an IAsyncEnumerable&lt;T&gt; and flattens the resulting sequences into one sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TItem">The type of the intermediate elements collected by <paramref name="collectionSelector"/>.</typeparam>
            <typeparam name="TResult">The type of the elements of the resulting sequence by <paramref name="resultSelector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="collectionSelector">A transform function to apply to each element of the input sequence.</param>
            <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Take``1(System.Collections.Async.IAsyncEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">A sequence to return elements from.</param>
            <param name="count">The number of elements to return.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.TakeWhile``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns elements from a sequence as long as a specified condition is true.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.ToListAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Creates a list of elements asynchronously from the enumerable source
            </summary>
            <typeparam name="T">The type of the elements of source</typeparam>
            <param name="source">The collection of elements</param>
            <param name="cancellationToken">A cancellation token to cancel the async operation</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.ToArrayAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Creates an array of elements asynchronously from the enumerable source
            </summary>
            <typeparam name="T">The type of the elements of source</typeparam>
            <param name="source">The collection of elements</param>
            <param name="cancellationToken">A cancellation token to cancel the async operation</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.ToDictionaryAsync``2(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="cancellationToken">A cancellation token to cancel the async operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.ToDictionaryAsync``2(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <param name="cancellationToken">A cancellation token to cancel the async operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.ToDictionaryAsync``3(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="elementSelector">A transform function to produce a result element value from each element.</param>
            <param name="cancellationToken">A cancellation token to cancel the async operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.ToDictionaryAsync``3(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="elementSelector">A transform function to produce a result element value from each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <param name="cancellationToken">A cancellation token to cancel the async operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.ToLookupAsync``2(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Linq.ILookup`2"/> from an <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to create a <see cref="T:System.Linq.ILookup`2"/> from.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="cancellationToken">A cancellation token to cancel the async operation.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.ToLookupAsync``2(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Linq.ILookup`2"/> from an <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> according to a specified key selector function and key comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to create a <see cref="T:System.Linq.ILookup`2"/> from.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <param name="cancellationToken">A cancellation token to cancel the async operation.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.ToLookupAsync``3(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Linq.ILookup`2"/> from an <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> according to a specified key selector function and an element selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to create a <see cref="T:System.Linq.ILookup`2"/> from.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="elementSelector">A transform function to produce a result element value from each element.</param>
            <param name="cancellationToken">A cancellation token to cancel the async operation.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.ToLookupAsync``3(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Linq.ILookup`2"/> from an <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> according to a specified key selector function, a comparer and an element selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to create a <see cref="T:System.Linq.ILookup`2"/> from.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="elementSelector">A transform function to produce a result element value from each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <param name="cancellationToken">A cancellation token to cancel the async operation.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Skip``1(System.Collections.Async.IAsyncEnumerable{``0},System.Int32)">
            <summary>
            An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return elements from.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return elements from.</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.SkipWhile``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Where``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Where``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Int64,System.Boolean})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to filter.</param>
            <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the source element.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Cast``1(System.Collections.Async.IAsyncEnumerable)">
            <summary>
            Casts the elements of an <see cref="T:System.Collections.Async.IAsyncEnumerable"/> to the specified type.
            </summary>
            <typeparam name="TResult">The type to cast the elements of <paramref name="source"/> to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable"/> that contains the elements to be cast to type <typeparamref name="TResult"/>.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.OfType``1(System.Collections.Async.IAsyncEnumerable)">
            <summary>
            Filters the elements of an <see cref="T:System.Collections.Async.IAsyncEnumerable"/> based on a specified type.
            </summary>
            <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Async.IAsyncEnumerable"/> whose elements to filter.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.DefaultIfEmpty``1(System.Collections.Async.IAsyncEnumerable{``0})">
            <summary>
            Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to return the specified value for if it is empty.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.DefaultIfEmpty``1(System.Collections.Async.IAsyncEnumerable{``0},``0)">
            <summary>
            Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to return the specified value for if it is empty.</param>
            <param name="defaultValue">The value to return if the sequence is empty.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Batch``1(System.Collections.Async.IAsyncEnumerable{``0},System.Int32)">
            <summary>
            Splits the input collection into series of batches.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to batch.</param>
            <param name="batchSize">The maximum number of elements to put in a batch.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Batch``2(System.Collections.Async.IAsyncEnumerable{``0},System.Int32)">
            <summary>
            Splits the input collection into series of batches.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <typeparam name="TStandardCollection">
            The type of a .NET's standard collection that forms a batch. Supported types are:
            <see cref="T:System.Collections.Generic.List`1"/>, <see cref="T:System.Collections.Generic.Stack`1"/>, <see cref="T:System.Collections.Generic.Queue`1"/>, <see cref="T:System.Collections.Generic.HashSet`1"/>,
            <see cref="T:System.Collections.Generic.LinkedList`1"/>, <see cref="T:System.Collections.Generic.SortedSet`1"/>, <see cref="T:System.Collections.Concurrent.BlockingCollection`1"/>,
            <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>, <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>, <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to batch.</param>
            <param name="batchSize">The maximum number of elements to put in a batch.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Batch``1(System.Collections.Async.IAsyncEnumerable{``0},System.Int64,System.Func{``0,System.Int64})">
            <summary>
            Splits the input collection into series of batches.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to batch.</param>
            <param name="maxBatchWeight">The maximum logical weight of elements that a single batch can accomodate.</param>
            <param name="weightSelector">A function that computes a weight of a particular element, which is used to make a decision if it can fit into a batch.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Batch``2(System.Collections.Async.IAsyncEnumerable{``0},System.Int64,System.Func{``0,System.Int64})">
            <summary>
            Splits the input collection into series of batches.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <typeparam name="TStandardCollection">
            The type of a .NET's standard collection that forms a batch. Supported types are:
            <see cref="T:System.Collections.Generic.List`1"/>, <see cref="T:System.Collections.Generic.Stack`1"/>, <see cref="T:System.Collections.Generic.Queue`1"/>, <see cref="T:System.Collections.Generic.HashSet`1"/>,
            <see cref="T:System.Collections.Generic.LinkedList`1"/>, <see cref="T:System.Collections.Generic.SortedSet`1"/>, <see cref="T:System.Collections.Concurrent.BlockingCollection`1"/>,
            <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>, <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>, <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to batch.</param>
            <param name="maxBatchWeight">The maximum logical weight of elements that a single batch can accomodate.</param>
            <param name="weightSelector">A function that computes a weight of a particular element, which is used to make a decision if it can fit into a batch.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Batch``1(System.Collections.Async.IAsyncEnumerable{``0},System.Int32,System.Int64,System.Func{``0,System.Int64})">
            <summary>
            Splits the input collection into series of batches.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to batch.</param>
            <param name="maxItemsInBatch">The maximum number of elements to put in a batch regardless their total weight.</param>
            <param name="maxBatchWeight">The maximum logical weight of elements that a single batch can accomodate.</param>
            <param name="weightSelector">A function that computes a weight of a particular element, which is used to make a decision if it can fit into a batch.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Batch``2(System.Collections.Async.IAsyncEnumerable{``0},System.Int32,System.Int64,System.Func{``0,System.Int64})">
            <summary>
            Splits the input collection into series of batches.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <typeparam name="TStandardCollection">
            The type of a .NET's standard collection that forms a batch. Supported types are:
            <see cref="T:System.Collections.Generic.List`1"/>, <see cref="T:System.Collections.Generic.Stack`1"/>, <see cref="T:System.Collections.Generic.Queue`1"/>, <see cref="T:System.Collections.Generic.HashSet`1"/>,
            <see cref="T:System.Collections.Generic.LinkedList`1"/>, <see cref="T:System.Collections.Generic.SortedSet`1"/>, <see cref="T:System.Collections.Concurrent.BlockingCollection`1"/>,
            <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>, <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>, <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to batch.</param>
            <param name="maxItemsInBatch">The maximum number of elements to put in a batch regardless their total weight.</param>
            <param name="maxBatchWeight">The maximum logical weight of elements that a single batch can accomodate.</param>
            <param name="weightSelector">A function that computes a weight of a particular element, which is used to make a decision if it can fit into a batch.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Batch``2(System.Collections.Async.IAsyncEnumerable{``0},System.Nullable{System.Int32},System.Int64,System.Func{``0,System.Int64},System.Func{System.Nullable{System.Int32},``1},System.Action{``1,``0})">
            <summary>
            Splits the input collection into series of batches.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <typeparam name="TBatch">The type of a batch of elements.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to batch.</param>
            <param name="maxItemsInBatch">The maximum number of elements to put in a batch regardless their total weight.</param>
            <param name="maxBatchWeight">The maximum logical weight of elements that a single batch can accomodate.</param>
            <param name="weightSelector">A function that computes a weight of a particular element, which is used to make a decision if it can fit into a batch.</param>
            <param name="createBatch">A function that creates a new batch with optional suggested capacity.</param>
            <param name="addItem">An action that adds an element to a batch.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.UnionAll``1(System.Collections.Async.IAsyncEnumerable{``0},System.Collections.Async.IAsyncEnumerable{``0})">
            <summary>
            Produces the set union of two sequences, which includes duplicate elements.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="first">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> whose elements form the first set for the union.</param>
            <param name="second">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> whose elements form the second set for the union.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.UnionAll``1(System.Collections.Generic.IEnumerable{System.Collections.Async.IAsyncEnumerable{``0}})">
            <summary>
            Produces the set union of multiple sequences, which includes duplicate elements.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="collections">A set of <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> whose elements form the union.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Append``1(System.Collections.Async.IAsyncEnumerable{``0},``0)">
            <summary>
            Creates a new sequence based on input one plus an extra element at the end.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return the single element of.</param>
            <param name="element">An extra element to be returned on enumeration.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Prepend``1(System.Collections.Async.IAsyncEnumerable{``0},``0)">
            <summary>
            Creates a new sequence based on input one plus an extra element in the beginning.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return the single element of.</param>
            <param name="element">An extra element to be returned on enumeration.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Concat``1(System.Collections.Async.IAsyncEnumerable{``0},System.Collections.Async.IAsyncEnumerable{``0})">
            <summary>
            Concatenates two sequences.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <param name="first">The first sequence to concatenate.</param>
            <param name="second">The sequence to concatenate to the first sequence.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Distinct``1(System.Collections.Async.IAsyncEnumerable{``0})">
            <summary>
            Returns distinct elements from a sequence by using the default equality comparer to compare values.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.Distinct``1(System.Collections.Async.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.AggregateAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,``0,``0},System.Threading.CancellationToken)">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source"> An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to aggregate over.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="cancellationToken">A cancellation token to cancel the async operation.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.AggregateAsync``2(System.Collections.Async.IAsyncEnumerable{``0},``1,System.Func{``1,``0,``1},System.Threading.CancellationToken)">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <param name="source"> An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="cancellationToken">A cancellation token to cancel the async operation.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerableExtensions.AggregateAsync``3(System.Collections.Async.IAsyncEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},System.Threading.CancellationToken)">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <param name="source"> An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
            <param name="cancellationToken">A cancellation token to cancel the async operation.</param>
        </member>
        <member name="T:System.Collections.Async.IAsyncEnumeratorExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> interface
            </summary>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.SingleAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return the single element of.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/>.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when this operation is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.SingleAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.String,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return the single element of.</param>
            <param name="noneExceptionMessage">The message of an exception which is thrown when the source collection is empty.</param>
            <param name="manyExceptionMessage">The message of an exception which is thrown when the source collection has more than one element.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/>.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when this operation is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.SingleAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence that matches the criteria.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return the single element of.</param>
            <param name="predicate">Criteria predicate to select the only element.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/>.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when this operation is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.SingleAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Boolean},System.String,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence that matches the criteria.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return the single element of.</param>
            <param name="predicate">Criteria predicate to select the only element.</param>
            <param name="noneExceptionMessage">The message of an exception which is thrown when the source collection is has no element matching the criteria.</param>
            <param name="manyExceptionMessage">The message of an exception which is thrown when the source collection has more than one element matching the criteria.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/>.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when this operation is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.SingleOrDefaultAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns the only element of a sequence, and returns a default value if there is not exactly one element in the sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return the single element of.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/>.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when this operation is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.SingleOrDefaultAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns the only element of a sequence, and returns a default value if there is not exactly one element in the sequence that matches the criteria.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> to return the single element of.</param>
            <param name="predicate">Criteria predicate to select the only element.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/>.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when this operation is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.FirstAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns the first element in the <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to return an element from.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/></param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when this operation is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.FirstAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns the first element in the <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to return an element from.</param>
            <param name="exceptionMessage">An optional custom exception message for the case when the <paramref name="source"/> is empty</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/></param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when this operation is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.FirstAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns the first element in a sequence that satisfies a specified condition.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/></param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when this operation is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.FirstAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Boolean},System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns the first element in a sequence that satisfies a specified condition.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="exceptionMessage">An optional custom exception message for the case when the <paramref name="source"/> is empty</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/></param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when this operation is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.FirstOrDefaultAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns the first element in the <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/>, or a default value if no element is found.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to return an element from.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/></param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when this operation is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.FirstOrDefaultAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns the first element in a sequence that satisfies a specified condition, or a default value if no element is found.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can halt enumeration of <paramref name="source"/></param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when this operation is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.Select``2(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,``1},System.Boolean)">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.Select``2(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Int64,``1},System.Boolean)">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.Take``1(System.Collections.Async.IAsyncEnumerator{``0},System.Int32,System.Boolean)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">A sequence to return elements from.</param>
            <param name="count">The number of elements to return.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.TakeWhile``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Returns elements from a sequence as long as a specified condition is true.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.ToListAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Creates a list of elements asynchronously from the enumerable source
            </summary>
            <typeparam name="T">The type of the elements of source</typeparam>
            <param name="source">The collection of elements</param>
            <param name="cancellationToken">A cancellation token to cancel the async operation</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when this operation is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.ToArrayAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Creates an array of elements asynchronously from the enumerable source
            </summary>
            <typeparam name="T">The type of the elements of source</typeparam>
            <param name="source">The collection of elements</param>
            <param name="cancellationToken">A cancellation token to cancel the async operation</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when this operation is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.Skip``1(System.Collections.Async.IAsyncEnumerator{``0},System.Int32,System.Boolean)">
            <summary>
            An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to return elements from.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to return elements from.</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.SkipWhile``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.Where``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.Where``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Int64,System.Boolean},System.Boolean)">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to filter.</param>
            <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the source element.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.Cast``1(System.Collections.Async.IAsyncEnumerator,System.Boolean)">
            <summary>
            Casts the elements of an <see cref="T:System.Collections.Async.IAsyncEnumerator"/> to the specified type.
            </summary>
            <typeparam name="TResult">The type to cast the elements of <paramref name="source"/> to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator"/> that contains the elements to be cast to type <typeparamref name="TResult"/>.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.DefaultIfEmpty``1(System.Collections.Async.IAsyncEnumerator{``0},System.Boolean)">
            <summary>
            Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to return the specified value for if it is empty.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.DefaultIfEmpty``1(System.Collections.Async.IAsyncEnumerator{``0},``0,System.Boolean)">
            <summary>
            Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to return the specified value for if it is empty.</param>
            <param name="defaultValue">The value to return if the sequence is empty.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.Batch``1(System.Collections.Async.IAsyncEnumerator{``0},System.Int32,System.Boolean)">
            <summary>
            Splits the input collection into series of batches.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to batch.</param>
            <param name="batchSize">The maximum number of elements to put in a batch.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.Batch``2(System.Collections.Async.IAsyncEnumerator{``0},System.Int32,System.Boolean)">
            <summary>
            Splits the input collection into series of batches.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <typeparam name="TStandardCollection">
            The type of a .NET's standard collection that forms a batch. Supported types are:
            <see cref="T:System.Collections.Generic.List`1"/>, <see cref="T:System.Collections.Generic.Stack`1"/>, <see cref="T:System.Collections.Generic.Queue`1"/>, <see cref="T:System.Collections.Generic.HashSet`1"/>,
            <see cref="T:System.Collections.Generic.LinkedList`1"/>, <see cref="T:System.Collections.Generic.SortedSet`1"/>, <see cref="T:System.Collections.Concurrent.BlockingCollection`1"/>,
            <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>, <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>, <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to batch.</param>
            <param name="batchSize">The maximum number of elements to put in a batch.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.Batch``1(System.Collections.Async.IAsyncEnumerator{``0},System.Int64,System.Func{``0,System.Int64},System.Boolean)">
            <summary>
            Splits the input collection into series of batches.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to batch.</param>
            <param name="maxBatchWeight">The maximum logical weight of elements that a single batch can accomodate.</param>
            <param name="weightSelector">A function that computes a weight of a particular element, which is used to make a decision if it can fit into a batch.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.Batch``2(System.Collections.Async.IAsyncEnumerator{``0},System.Int64,System.Func{``0,System.Int64},System.Boolean)">
            <summary>
            Splits the input collection into series of batches.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <typeparam name="TStandardCollection">
            The type of a .NET's standard collection that forms a batch. Supported types are:
            <see cref="T:System.Collections.Generic.List`1"/>, <see cref="T:System.Collections.Generic.Stack`1"/>, <see cref="T:System.Collections.Generic.Queue`1"/>, <see cref="T:System.Collections.Generic.HashSet`1"/>,
            <see cref="T:System.Collections.Generic.LinkedList`1"/>, <see cref="T:System.Collections.Generic.SortedSet`1"/>, <see cref="T:System.Collections.Concurrent.BlockingCollection`1"/>,
            <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>, <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>, <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to batch.</param>
            <param name="maxBatchWeight">The maximum logical weight of elements that a single batch can accomodate.</param>
            <param name="weightSelector">A function that computes a weight of a particular element, which is used to make a decision if it can fit into a batch.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.Batch``1(System.Collections.Async.IAsyncEnumerator{``0},System.Int32,System.Int64,System.Func{``0,System.Int64},System.Boolean)">
            <summary>
            Splits the input collection into series of batches.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to batch.</param>
            <param name="maxItemsInBatch">The maximum number of elements to put in a batch regardless their total weight.</param>
            <param name="maxBatchWeight">The maximum logical weight of elements that a single batch can accomodate.</param>
            <param name="weightSelector">A function that computes a weight of a particular element, which is used to make a decision if it can fit into a batch.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.Batch``2(System.Collections.Async.IAsyncEnumerator{``0},System.Int32,System.Int64,System.Func{``0,System.Int64},System.Boolean)">
            <summary>
            Splits the input collection into series of batches.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <typeparam name="TStandardCollection">
            The type of a .NET's standard collection that forms a batch. Supported types are:
            <see cref="T:System.Collections.Generic.List`1"/>, <see cref="T:System.Collections.Generic.Stack`1"/>, <see cref="T:System.Collections.Generic.Queue`1"/>, <see cref="T:System.Collections.Generic.HashSet`1"/>,
            <see cref="T:System.Collections.Generic.LinkedList`1"/>, <see cref="T:System.Collections.Generic.SortedSet`1"/>, <see cref="T:System.Collections.Concurrent.BlockingCollection`1"/>,
            <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>, <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>, <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to batch.</param>
            <param name="maxItemsInBatch">The maximum number of elements to put in a batch regardless their total weight.</param>
            <param name="maxBatchWeight">The maximum logical weight of elements that a single batch can accomodate.</param>
            <param name="weightSelector">A function that computes a weight of a particular element, which is used to make a decision if it can fit into a batch.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.Batch``2(System.Collections.Async.IAsyncEnumerator{``0},System.Nullable{System.Int32},System.Int64,System.Func{``0,System.Int64},System.Func{System.Nullable{System.Int32},``1},System.Action{``1,``0},System.Boolean)">
            <summary>
            Splits the input collection into series of batches.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <typeparam name="TBatch">The type of a batch of elements.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> to batch.</param>
            <param name="maxItemsInBatch">The maximum number of elements to put in a batch regardless their total weight.</param>
            <param name="maxBatchWeight">The maximum logical weight of elements that a single batch can accomodate.</param>
            <param name="weightSelector">A function that computes a weight of a particular element, which is used to make a decision if it can fit into a batch.</param>
            <param name="createBatch">A function that creates a new batch with optional suggested capacity.</param>
            <param name="addItem">An action that adds an element to a batch.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="source"/> when enumeration is complete</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.UnionAll``1(System.Collections.Async.IAsyncEnumerator{``0},System.Collections.Async.IAsyncEnumerator{``0},System.Boolean)">
            <summary>
            Produces the set union of two sequences, which includes duplicate elements.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="first">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> whose elements form the first set for the union.</param>
            <param name="second">An <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> whose elements form the second set for the union.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on input <paramref name="first"/> and <paramref name="second"/> when enumeration is complete.</param>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumeratorExtensions.UnionAll``1(System.Collections.Generic.IEnumerable{System.Collections.Async.IAsyncEnumerator{``0}},System.Boolean)">
            <summary>
            Produces the set union of multiple sequences, which includes duplicate elements.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="collections">A set of <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> whose elements form the union.</param>
            <param name="disposeSource">Flag to call the <see cref="M:System.IDisposable.Dispose"/> on all input <paramref name="collections"/> when enumeration is complete.</param>
        </member>
        <member name="T:System.Collections.Async.ParallelForEachException">
            <summary>
            Used in ParallelForEachAsync&lt;T&gt; extension method
            </summary>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:System.Collections.Async.ParallelForEachExtensions">
            <summary>
            Extensions methods for IEnumerable and IAsyncEnumerable to do parallel for-each loop in async-await manner
            </summary>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Int64,System.Threading.Tasks.Task},System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="collection">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item, where first argument is the item and second argument is item's index in the collection</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="breakLoopOnException">Set to True to stop processing items when first exception occurs. The result <see cref="T:System.AggregateException"/> might contain several exceptions though when faulty tasks finish at the same time.</param>
            <param name="gracefulBreak">If True (the default behavior), waits on completion for all started tasks when the loop breaks due to cancellation or an exception</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Int64,System.Threading.Tasks.Task},System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="enumerator">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item, where first argument is the item and second argument is item's index in the collection</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="breakLoopOnException">Set to True to stop processing items when first exception occurs. The result <see cref="T:System.AggregateException"/> might contain several exceptions though when faulty tasks finish at the same time.</param>
            <param name="gracefulBreak">If True (the default behavior), waits on completion for all started tasks when the loop breaks due to cancellation or an exception</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Int64,System.Threading.Tasks.Task},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="collection">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item, where first argument is the item and second argument is item's index in the collection</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="breakLoopOnException">Set to True to stop processing items when first exception occurs. The result <see cref="T:System.AggregateException"/> might contain several exceptions though when faulty tasks finish at the same time.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Int64,System.Threading.Tasks.Task},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="enumerator">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item, where first argument is the item and second argument is item's index in the collection</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="breakLoopOnException">Set to True to stop processing items when first exception occurs. The result <see cref="T:System.AggregateException"/> might contain several exceptions though when faulty tasks finish at the same time.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Int64,System.Threading.Tasks.Task},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="collection">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item, where first argument is the item and second argument is item's index in the collection</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Int64,System.Threading.Tasks.Task},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="enumerator">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item, where first argument is the item and second argument is item's index in the collection</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="collection">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item, where first argument is the item and second argument is item's index in the collection</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="enumerator">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item, where first argument is the item and second argument is item's index in the collection</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="collection">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="breakLoopOnException">Set to True to stop processing items when first exception occurs. The result <see cref="T:System.AggregateException"/> might contain several exceptions though when faulty tasks finish at the same time.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="enumerator">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="breakLoopOnException">Set to True to stop processing items when first exception occurs. The result <see cref="T:System.AggregateException"/> might contain several exceptions though when faulty tasks finish at the same time.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="collection">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="breakLoopOnException">Set to True to stop processing items when first exception occurs. The result <see cref="T:System.AggregateException"/> might contain several exceptions though when faulty tasks finish at the same time.</param>
            <param name="gracefulBreak">If True (the default behavior), waits on completion for all started tasks when the loop breaks due to cancellation or an exception</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="enumerator">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="breakLoopOnException">Set to True to stop processing items when first exception occurs. The result <see cref="T:System.AggregateException"/> might contain several exceptions though when faulty tasks finish at the same time.</param>
            <param name="gracefulBreak">If True (the default behavior), waits on completion for all started tasks when the loop breaks due to cancellation or an exception</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="collection">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="enumerator">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Async.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="collection">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Async.IAsyncEnumerator{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="enumerator">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64,System.Threading.Tasks.Task},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="collection">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item, where first argument is the item and second argument is item's index in the collection</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="breakLoopOnException">Set to True to stop processing items when first exception occurs. The result <see cref="T:System.AggregateException"/> might contain several exceptions though when faulty tasks finish at the same time.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Generic.IEnumerator{``0},System.Func{``0,System.Int64,System.Threading.Tasks.Task},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="enumerator">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item, where first argument is the item and second argument is item's index in the collection</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="breakLoopOnException">Set to True to stop processing items when first exception occurs. The result <see cref="T:System.AggregateException"/> might contain several exceptions though when faulty tasks finish at the same time.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64,System.Threading.Tasks.Task},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="collection">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item, where first argument is the item and second argument is item's index in the collection</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Generic.IEnumerator{``0},System.Func{``0,System.Int64,System.Threading.Tasks.Task},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="enumerator">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item, where first argument is the item and second argument is item's index in the collection</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="collection">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item, where first argument is the item and second argument is item's index in the collection</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Generic.IEnumerator{``0},System.Func{``0,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="enumerator">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item, where first argument is the item and second argument is item's index in the collection</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="collection">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="breakLoopOnException">Set to True to stop processing items when first exception occurs. The result <see cref="T:System.AggregateException"/> might contain several exceptions though when faulty tasks finish at the same time.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Generic.IEnumerator{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="enumerator">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="breakLoopOnException">Set to True to stop processing items when first exception occurs. The result <see cref="T:System.AggregateException"/> might contain several exceptions though when faulty tasks finish at the same time.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="collection">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Generic.IEnumerator{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="enumerator">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item</param>
            <param name="maxDegreeOfParalellism">Maximum items to schedule processing in parallel. The actual concurrency level depends on TPL settings. Set to 0 to choose a default value based on processor count.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="collection">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="M:System.Collections.Async.ParallelForEachExtensions.ParallelForEachAsync``1(System.Collections.Generic.IEnumerator{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Invokes an asynchronous action on each item in the collection in parallel
            </summary>
            <typeparam name="T">The type of an item</typeparam>
            <param name="enumerator">The collection of items to perform actions on</param>
            <param name="asyncItemAction">An asynchronous action to perform on the item</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.Collections.Async.ParallelForEachException">Wraps any exception(s) that occurred inside <paramref name="asyncItemAction"/></exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the loop is canceled with <paramref name="cancellationToken"/></exception>
        </member>
        <member name="T:System.Collections.Async.IAsyncEnumerable">
            <summary>
            Exposes an asynchronous enumerator, which supports a simple iteration over a non-generic collection
            </summary>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerable.GetAsyncEnumeratorAsync(System.Threading.CancellationToken)">
            <summary>
            Creates an enumerator that iterates through a collection asynchronously
            </summary>
            <param name="cancellationToken">A cancellation token to cancel creation of the enumerator in case if it takes a lot of time</param>
            <returns>Returns a task with the created enumerator as result on completion</returns>
        </member>
        <member name="T:System.Collections.Async.IAsyncEnumerable`1">
            <summary>
            Exposes the asynchronous enumerator, which supports a simple iteration over a collection of typed items
            </summary>
            <typeparam name="T">The type of items in the collection</typeparam>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerable`1.GetAsyncEnumeratorAsync(System.Threading.CancellationToken)">
            <summary>
            Creates an enumerator that iterates through a collection asynchronously
            </summary>
            <param name="cancellationToken">A cancellation token to cancel creation of the enumerator in case if it takes a lot of time</param>
            <returns>Returns a task with the created enumerator as result on completion</returns>
        </member>
        <member name="T:System.Collections.Async.IAsyncEnumerator">
            <summary>
            Supports a simple asynchronous iteration over a non-generic collection
            </summary>
        </member>
        <member name="P:System.Collections.Async.IAsyncEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:System.Collections.Async.IAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)">
            <summary>
            Advances the enumerator to the next element of the collection asynchronously
            </summary>
            <param name="cancellationToken">A cancellation token to cancel the enumeration</param>
            <returns>Returns a Task that does transition to the next element. The result of the task is True if the enumerator was successfully advanced to the next element, or False if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:System.Collections.Async.IAsyncEnumerator`1">
            <summary>
            Supports a simple asynchronous iteration over a collection of typed items
            </summary>
            <typeparam name="T">The type of items in the collection</typeparam>
        </member>
        <member name="P:System.Collections.Async.IAsyncEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:System.Collections.Async.Internals.CurrentValueContainer`1">
            <summary>
            Internal base type for <see cref="T:System.Collections.Async.AsyncEnumerator`1"/> and <see cref="T:System.Collections.Async.AsyncEnumeratorWithState`2"/>
            </summary>
        </member>
        <member name="T:System.Collections.Async.Internals.TaskCompletionSource">
            <summary>
            Utility methods for <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>
            </summary>
        </member>
        <member name="M:System.Collections.Async.Internals.TaskCompletionSource.DisableTaskCompletionSourceReUse">
            <summary>
            Forcibly disables re-use of <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> instances in the <see cref="M:System.Collections.Async.Internals.TaskCompletionSource.Reset``1(System.Threading.Tasks.TaskCompletionSource{``0}@,System.Object)"/> method.
            This is just a safety switch in case when something goes wrong with re-using instances of <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Async.Internals.TaskCompletionSource.Reset``1(System.Threading.Tasks.TaskCompletionSource{``0}@,System.Object)">
            <summary>
            Resets a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> to initial incomplete state.
            This method by default re-uses the same instance of the <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> by re-setting internal state of its <see cref="T:System.Threading.Tasks.Task"/> using reflection.
            If such feature is not available or explicitly disable with the <see cref="M:System.Collections.Async.Internals.TaskCompletionSource.DisableTaskCompletionSourceReUse"/> method, it just returns a new instance of a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>.
            </summary>
            <typeparam name="T">Type of the result value</typeparam>
            <param name="taskCompletionSource">Target <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> to be reset or recreated. It's safe to pass null.</param>
            <param name="stateObject">Optional state object that you pass into <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> constructor.</param>
        </member>
        <member name="T:System.Collections.IEnumerableExtensions">
            <summary>
            Converts generic IEnumerable to IAsyncEnumerable
            </summary>
        </member>
        <member name="M:System.Collections.IEnumerableExtensions.ToAsyncEnumerable(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Creates <see cref="T:System.Collections.Async.IAsyncEnumerable"/> adapter for <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <param name="enumerable">The instance of <see cref="T:System.Collections.IEnumerable"/> to convert</param>
            <param name="runSynchronously">If True the enumeration will be performed on the same thread, otherwise the MoveNext will be executed on a separate thread with Task.Run method</param>
            <returns>Returns an instance of <see cref="T:System.Collections.Async.IAsyncEnumerable"/> implementation</returns>
        </member>
        <member name="T:System.Collections.Generic.IEnumerableExtensions">
            <summary>
            Converts generic IEnumerable to IAsyncEnumerable
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.ToAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Creates <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> adapter for <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="enumerable">The instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert</param>
            <param name="runSynchronously">If True the enumeration will be performed on the same thread, otherwise the MoveNext will be executed on a separate thread with Task.Run method</param>
            <returns>Returns an instance of <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> implementation</returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.GetAsyncEnumerator``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Creates <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> adapter for the enumerator of <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="enumerable">The instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert</param>
            <param name="runSynchronously">If True the enumeration will be performed on the same thread, otherwise the MoveNext will be executed on a separate thread with Task.Run method</param>
            <returns>Returns an instance of <see cref="T:System.Collections.Async.IAsyncEnumerable`1"/> implementation</returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.ToAsyncEnumerator``1(System.Collections.Generic.IEnumerator{``0},System.Boolean)">
            <summary>
            Creates <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> adapter for <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="enumerator">The instance of <see cref="T:System.Collections.Generic.IEnumerator`1"/> to convert</param>
            <param name="runSynchronously">If True the enumeration will be performed on the same thread, otherwise the MoveNext will be executed on a separate thread with Task.Run method</param>
            <returns>Returns an instance of <see cref="T:System.Collections.Async.IAsyncEnumerator`1"/> implementation</returns>
        </member>
    </members>
</doc>
